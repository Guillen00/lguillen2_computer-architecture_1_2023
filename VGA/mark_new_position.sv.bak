
module mark_new_position(
	input clock, reset,
   input [1:0] pos1,pos2,pos3,pos4,pos5,pos6,pos7,pos8,pos9, 
   input [8:0] PC_en, PL_en,
	input status,
	input pc, play
   );
 // Random pos
 reg changed;
 always @(posedge clock or posedge reset)
 begin
	if(status) begin
	
		 if (pos1 == 2'b00 && PL_en[0]==1'b0 && play == 1'b1)begin
			pos1 <= 2'b01;
		 end
		 else if (pos1 == 2'b00 && PC_en[0]==1'b0 && pc == 1'b1 )begin
			pos1 <= 2'b01;
		 end
			
			
		 else if (pos2 == 2'b00 && PL_en[0]==1'b0 && play == 1'b1)begin
			pos2 <= 2'b01;
		 end
		 else if (pos2 == 2'b00 && PC_en[0]==1'b0 && pc == 1'b1)begin
			pos2 <= 2'b01;
		 end
		 
		 
		 else if (pos3 == 2'b00 && PL_en[0]==1'b0 && play == 1'b1)begin
			pos3 <= 2'b01;
		 end
		 else if (pos3 == 2'b00 && PC_en[0]==1'b0 && pc == 1'b1)begin
			pos3 <= 2'b01;
		 end
		 
		 
		 else if (pos4 == 2'b00 && PL_en[0]==1'b0 && play == 1'b1)begin
			pos4 <= 2'b01;
		 end
		 else if (pos4 == 2'b00 && PC_en[0]==1'b0 && pc == 1'b1)begin
			pos4 <= 2'b01;
		 end
		 
		 
		 else if (pos5 == 2'b00 && PL_en[0]==1'b0 && play == 1'b1)begin
			pos5 <= 2'b01;
		 end
		 else if (pos5 == 2'b00 && PC_en[0]==1'b0 && pc == 1'b1)begin
			pos5 <= 2'b01;
		 end
	
	
		 else if (pos6 == 2'b00 && PL_en[0]==1'b0 && play == 1'b1)begin
			pos6 <= 2'b01;
		 end
		 else if (pos6 == 2'b00 && PC_en[0]==1'b0 && pc == 1'b1)begin
			pos6 <= 2'b01;
		 end
	
	
	    else if (pos7 == 2'b00 && PL_en[0]==1'b0 && play == 1'b1)begin
			pos7 <= 2'b01;;
	    end
	    else if (pos7 == 2'b00 && PC_en[0]==1'b0 && pc == 1'b1)begin
			pos7 <= 2'b01;
		 end
		 
		 
		 else if (pos8 == 2'b00 && PL_en[0]==1'b0 && play == 1'b1)begin
			pos8 <= 2'b01;
		 end
		 else if (pos8 == 2'b00 && PC_en[0]==1'b0 && pc == 1'b1)begin
			pos8 <= 2'b01;
		 end
	 
	 
		 else if (pos9 == 2'b00 && PL_en[0]==1'b0 && play == 1'b1)begin
			pos9 <= 2'b01;
		 end
		 
		 else if (pos9 == 2'b00 && PC_en[0]==1'b0 && pc == 1'b1)begin
			pos9 <= 2'b01;
		 end
   end
end
	
	
	
	
	
	
	
	
endmodule 